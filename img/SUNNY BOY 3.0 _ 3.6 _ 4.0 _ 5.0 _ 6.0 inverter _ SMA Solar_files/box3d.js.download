var box3d_version = "4.7.9";
var $j = jQuery.noConflict();  /* avoid conflicts with foreign jquery */
var $gInstance = null;  /* compatibility instance */
var $gTabIndex = 0;  /* ? Intended for multiple Players at once? ? */

/* EXTERNAL -- BEGIN -- */
/* The .bind method from Prototype.js */
/*       /* ???  Prototype.js isnt used!? */

if( !Function.prototype.bind ){  /* prototypes bind used? */
	Function.prototype.bind = function(){
		var c = this;
		var b = Array.prototype.slice.call(arguments);
		var a = b.shift();
		return function(){
			return c.apply(
				a, b.concat(
					Array.prototype.slice.call(arguments)
				)
			);
		};
	};
}

/* global object */
var isMobile = {
	Android: !!navigator.userAgent.match(/Android/i),
	BlackBerry: !!navigator.userAgent.match(/BlackBerry/i),
	iOS: !!navigator.userAgent.match(/iPhone|iPad|iPod/i),
	iPad: !!navigator.userAgent.match(/iPad/i),
	Opera: !!navigator.userAgent.match(/Opera Mini/i),
	Windows: !!navigator.userAgent.match(/IEMobile/i),
	any: null
};
isMobile.any = ( !!isMobile.Android || !!isMobile.BlackBerry || !!isMobile.iOS || !!isMobile.Opera || !!isMobile.Windows );


/* adds "universal unique id"s to the Math Prototype */
(function(){
	Math.uuid = function(len,radix){
		/* array of chars to use */
		var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
		var uuid = [];
		var i;

		radix = radix || chars.length;
		if( len ){
			for( i=0; i<len; i++ ){
				uuid[i] = chars[0|Math.random()*radix];
			}
		} else {
			/* rfc4122, version 4 form */
			var r;

			/* rfc4122 requires these characters */
			uuid[8]  = "-";
			uuid[13] = "-";
			uuid[18] = "-";
			uuid[23] = "-";
			uuid[14] = "4";

			/* Fill in random data.  At i==19 set the high bits of clock sequence as */
			/* per rfc4122, sec. 4.1.5 */
			for( i=0; i<36; i++ ){
				if( !uuid[i] ){
					r=0|Math.random()*16;;
					uuid[i] = g[( i == 19 ) ? ( r & 3 ) | 8 : r];
				}
			}
		}
		return uuid.join("");
	};

	/* A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance */
	/* by minimizing calls to random(). */
	Math.uuidFast = function(){
		/* array of chars to use */
		var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
		var uuid = new Array(36);
		var rnd = 0;
		var r;

		for( b=0; b<36; b++ ){
			if( b==8 || b==13 || b==18 || b==23 ){
				uuid[b] = "-";
			} else {
				if( b==14 ){
					uuid[b] = "4";
				} else {
					if( rnd<=2 ){
						rnd=33554432+(Math.random()*16777216)|0;
					}
					r = rnd & 15;
					rnd = rnd >> 4;
					uuid[b] = chars[( b==19 ) ? ( r&3 ) | 8 : r];
				}
			}
		}
		return uuid.join("");
	};

	/* A more compact, but less performant, RFC4122v4 solution: */
	Math.uuidCompact = function(){
		return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c){
			var r = Math.random()*16|0;
			v = c == "x" ? r : (r&3|8);
			return v.toString(16);
		});
	};
}());


/**
 * Utilities
 */
/* generate div with uuid */
function _uniqueDIV(className){
	return '<div id="box3d-' + Math.uuid(8,16) + '" class="'+className+'"></div>';
}
/* generate button with uuid */
function _uniqueButton(buttonTitle, className){
	return '<button id="box3d-' + Math.uuid(8,16) + '" title="'
		+ buttonTitle + '" class="' + className +
		' ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only" role="button"></button>';
}


























/* adds the class  |Box3DZoom|  to the jQuery Prototype */
$j.fn.Box3DZoom = function(c,a,b){
	this.box3D = c;
	this.boxZoom = a;
	this.boxZoomContainer = null;
	this.boxSpringer = null;
	this.boxSpringerText = null;
	this.settings = {
		height: "500px",
		width: "500px",
		position: "right",
		background: "#000",
		border: "2px solid #CCCCCC",
		margin: 9,
		text_colorBG: "#FFFFFF",
		text_colorFont: "#CCCCCC",
		text: "... Pointer Text ...",
		font: "",
		font_size: ""
	};
	this.UpdatePosition = function(){
		var f = this.box3D.ui.cnvImageCanvas;
		var g = this.box3D.context.offset().top-$j(window).scrollTop();
		var j = f.offset().left;
		var k = f.width();
		var l = f.height();
		var h = $j(this.boxZoom).width();
		var i = $j(this.boxZoom).height();
		var d = 0;
		var e = this.settings.position;
		if( screen.width<this.boxZoom.width() ){
			e = "bottom";
		}
		switch(e){
			default:
			case "right":
				this.boxZoom.css("left", j + k + d);
				this.boxZoom.css("top", g);
				break;
			case"left":
				this.boxZoom.css("left", j - h - d);
				this.boxZoom.css("top", g);
				break;
			case"bottom":this.boxZoom.css("left", j);
				this.boxZoom.css("top", g + l + d);
				break;
		}
	};
	this.SetZoomImage=function(d){
		this.boxZoomContainer.find("img").attr("src", d);
		this.boxZoomContainer.find("img").css("position", "absolute");
		this.boxZoomContainer.find("img").load(
			function(e){


							/* Verhaeltnisrechnung:
							 * grauer_ausschnitt : hauptbild = umrandeter_ausschnitt : groß_bild
							 *     X : A = B : C
							 * <=> X / A = B / C
							 * <=> X = A * B / C
							 * <=> g * ( w / f )
							 * <=> gr_ausschnitt = hauptbild * (umrandeter_ausschnitt / groß_bild)
							**/

							/* var box_elem = this.box3D.imageList[this.box3D.activeImageIndex]; */
							var box_elem = this.box3D.ui.cnvImageCanvas;
							var zoom_box_elem = this.boxZoomContainer.find("img");
							var springer_elem = this.boxSpringer;

							var springer_width = box_elem.width() * ( this.boxZoom.width() / zoom_box_elem.width() );
							springer_elem.css( "width", springer_width+"px" );

							var springer_height = box_elem.height() * ( this.boxZoom.height() / zoom_box_elem.height() );
							springer_elem.css( "height", springer_height+"px" );



							/* set preview to the middle of the picture */
							if( this.box3D.isFirstLoad ){
								this.MoveZoomImageByMouse(
									box_elem.offset().left + box_elem.width()/2,
									box_elem.offset().top + box_elem.height()/2
								);
								this.box3D.isFirstLoad = false;
							}



			}.bind(this)
		);
	};
	this.MoveZoomImageByMouse = function(mouse_x, mouse_y){


							/* console.log(mouse_x); */
							/* console.log(mouse_y); */


		var container_elem = this.box3D.ui.divImages;
			var container_width = container_elem.width();
			var container_height = container_elem.height();
			var container_x = this.box3D.ui.divImages.offset().left;
			var container_y = this.box3D.ui.divImages.offset().top;

		var box_elem = this.box3D.ui.cnvImageCanvas;
			var box_width = box_elem.width();
			var box_height = box_elem.height();
			var box_x = box_elem.offset().left;
			var box_y = box_elem.offset().top;

		var zoom_box_elem = this.boxZoomContainer.find("img");
			var zoom_box_width = zoom_box_elem.width();
			var zoom_box_height = zoom_box_elem.height();
			var zoom_box_x = 0;
			var zoom_box_y = 0;

		var springer_elem = this.boxSpringer;
			var springer_width = springer_elem.width();
			var springer_height = springer_elem.height();
			var springer_x = mouse_x - container_x - springer_width/2;
			var springer_y = mouse_y - container_y - springer_height/2;


		/* left border */
		if( (box_x - container_x) > springer_x ){
			springer_x = (box_x - container_x);
		}
		/* top border */
		if( (box_y - container_y) > springer_y ){
			springer_y = (box_y - container_y);
		}
		/* right border */
		if( (box_width-springer_width)+(box_x - container_x) < springer_x ){
			/* springer_x = (box_width-springer_width); */
			/* (box_x - container_x) */
			springer_x = (box_width-springer_width)+(box_x - container_x);
		}
		/* bottom border */
		if( (box_height-springer_height)+(box_y - container_y) < springer_y ){
			/* springer_y = (box_height-springer_height); */
			springer_y = (box_height-springer_height)+(box_y - container_y);
		}


		/* apply values */
		springer_elem.css("left", springer_x+"px");
		springer_elem.css("top",  springer_y+"px");



		/* zoom box scaling */
		zoom_box_x = (springer_x-(box_x-container_x))*(zoom_box_width/box_width)*-1;
		zoom_box_y = (springer_y-(box_y-container_y))*(zoom_box_height/box_height)*-1;

		/* apply to zoom box */
		this.boxZoomContainer.find("img").css("left",zoom_box_x+"px");
		this.boxZoomContainer.find("img").css("top",zoom_box_y+"px");
	};





	if( b ){
		$j.extend(this.settings,b);
	}
	this.settings.height = this.settings.height.replace("pxpx","px");
	this.settings.width = this.settings.width.replace("pxpx","px");
	this.boxZoom.css("height",this.settings.height);
	this.boxZoom.css("width",this.settings.width);
	this.boxZoom.css("border",this.settings.border);
	this.UpdatePosition();
	this.boxZoomContainer = $j(_uniqueDIV("zoomImageWrapper"));
	this.boxZoomContainer.append("<img src='' alt='Lade...'></img>");
	this.boxSpringer=$j(_uniqueDIV("springer"));
	this.boxSpringer.css("background-color",this.settings.background);
	this.box3D.ui.divImages.append(this.boxSpringer);
	this.boxSpringerText=$j(_uniqueDIV("box-text"));
	if( this.settings.pointer_text == "" ){
		this.boxSpringerText.hide();
	} else {
		this.boxSpringerText.css("background-color",this.settings.text_colorBG);
		this.boxSpringerText.css("color",this.settings.text_colorFont);
		if( this.settings.font != "" ){
			this.boxSpringerText.css("font-family",this.settings.font);
		}
		if( this.settings.font_size != "" ){
			this.boxSpringerText.css("font-size",this.settings.font_size);
		}
		this.boxSpringerText.html(this.settings.text);
	}
	this.boxZoom.append(this.boxZoomContainer);
	this.boxZoom.append(this.boxSpringerText);
	this.boxZoomContainer.on(
		"click touchstart",
		function(d){
			this.box3D.StopZoomIfActive();
		}.bind(this)
	)
};



/*------------------------------------------------------------------------------ */
/* class Box3D																	 */
/*------------------------------------------------------------------------------ */
/* adds the class  |Box3D|  to the jQuery Prototype */
$j.fn.Box3D = function(context, settings){

	this.context = context;
	this.context.attr("tabindex",$gTabIndex);
	$gTabIndex += 1;

	this.options = settings;
	this.imageLoadedCount = 0;
	this.activeImageIndex = 0;
	this.imageList = [];
	this.isRunning = false;
	this.isOnce = true;
	this.isRepeated = false;
	this.delay = 0;
	this.mousePageX = 0;
	this.mousePageY = 0;
	this.mouseIsDown = false;
	this.shouldSkipToggle = false;
	this.zoom = null;
	this.isFirstLoad = true;
	this.isLoaded = false;

	this.ui = {
		cnvImageCanvas: $j("<canvas id=\"main_image\" width=\"300px\" height=\"10px\" style=\"width: 300px; height: 10px; margin: 0px auto;\"></canvas>"),
		divImages: $j(_uniqueDIV("images")),
		divProgressBar: $j(_uniqueDIV("bprogressbar")),
		divControlPanel: $j(_uniqueDIV("controlpanel")),
		divControlPanelParent: $j(_uniqueDIV("controlpanel_parent")),
		divControls: null,
		btnPrevious: $j(_uniqueButton("Rückwärts","btn-prev")),
		btnNext: $j(_uniqueButton("Vorwärts","btn-next")),
		btnStart: $j(_uniqueButton("Start","btn-play")),
		btnControls: $j(_uniqueButton("Zoom","btn-zoom"))
	};
	this.ui.divImages.attr("tabindex",$gTabIndex);
	$gTabIndex++;


	/* select the next picture and show it */
	this.nextImage=function( stopPlayer ){
		if( stopPlayer ){
			this.stop();
		}
		var nextIndex = this.activeImageIndex + 1;
		var length = this.imageList.length;
		if( nextIndex >= length ){
			nextIndex = 0;
		}
		this.setImageActive(nextIndex);
	};

	/* select previous picture and show it */
	this.previousImage = function(startPlayer){
		if( startPlayer ){
			this.stop();
		}
		var prevIndex = this.activeImageIndex-1;
		var length = this.imageList.length;
		if( prevIndex<0 ){
			prevIndex = length-1;
		}
		this.setImageActive(prevIndex);
	};

	/* toggle start / pause */
	this.toggle = function(){
		if( this.isRunning ){
			this.isRepeated = false;
			this.stop();
		} else {
			this.start();
		}
	};

	/* start animation */
	this.start = function(){
		if( this.isRunning ){
			return;
		}
		var newFrameRate = this.options.framerate;
		if( this.options.framerate < 1 ){
			newFrameRate = 1;
		} else if( this.options.framerate > 22 ){
			newFrameRate = 22;
		}

		this.options.framerate = newFrameRate;
		this.delay = 1000/this.options.framerate;
		var directionFunction = null;
		switch( this.options.direction ){
			case"forward":
				directionFunction = function(){
					this.nextImage(false);
					if( this.isOnce ){
						if( this.activeImageIndex === this.imageList.length-1 ){
							this.isOnce = false;
							this.stop();
						}
					}
				};
				break;
			case"backward":
				directionFunction = function(){
					this.previousImage(false);
					if( this.isOnce ){
						if( this.activeImageIndex === 0 ){
							this.isOnce = false;
							this.stop();
						}
					}
				};
				break;
		}
		this.isRunning = setInterval( directionFunction.bind(this), this.delay );
		$j(this.ui.btnStart).switchClass( "btn-play", "btn-pause", 0 );
	};

	/* stop animation */
	this.stop=function(){
		if( !this.isRunning ){
			return;
		}

		clearInterval(this.isRunning);
		this.isRunning = false;
		this.isOnce = false;
		$j(this.ui.btnStart).switchClass("btn-pause","btn-play",0);
		if( this.isRepeated ){
			setTimeout(
				function(){
					if( this.isRepeated ){
						this.isOnce = true;
						this.start();
					}
				}.bind(this),
				parseInt(this.options.animate_interval) * 1000
			);
		}
	};

	/* draws the current picture on the canvas */
	this.setImageActive = function(index){
		/* notice class of new active picture id */
		this.activeImageIndex = index;

		/* current image information */
		var image = this.imageList[index][0];
		var img_width = image.width;
		var img_height = image.height;

		/* draw image */
		this.ui.cnvImageCanvas[0].getContext("2d").drawImage(image, 0, 0);

		/* zoom in, when not already zoomed in */
		if( this.options.controls == "zoom" && this.zoom != null ){
			this.zoom.SetZoomImage(
				this.imageList[this.activeImageIndex].attr("src").replace("small","large")
			);
		}
	};

	/* react to pressed keys */
	this.HandleKeyEvent = function(keyEvent){
		if( keyEvent.altKey || keyEvent.ctrlKey || keyEvent.metaKey ){
			return true;
		}
		var code = keyEvent.keyCode ? keyEvent.keyCode : keyEvent.which;
		switch( code ){
			case $j.ui.keyCode.SPACE:                  /* spacebar */
				this.toggle();
				this.shouldSkipToggle = true;
				return false;
			case $j.ui.keyCode.LEFT:                   /* left arrow */
				this.nextImage(true);
				keyEvent.preventDefault();
				return false;
			case $j.ui.keyCode.RIGHT:                  /* right arrow */
				this.previousImage(true);
				keyEvent.preventDefault();
				return false;
			case $j.ui.keyCode.UP:                     /* up arrow */
				this.options.framerate+=1;
				this.stop();
				this.start();
				keyEvent.preventDefault();
				return false;
			case $j.ui.keyCode.DOWN:                   /* down arrow */
				this.options.framerate-=1;
				this.stop();
				this.start();
				keyEvent.preventDefault();
				return false;
			case $j.ui.keyCode.ESCAPE:                 /* escape */
				if( this.options.controls=="zoom" ){
					this.StopZoomIfActive();
				}
				keyEvent.preventDefault();
			return false;
		}
	};

	/* method for checking, if app is still zooming */
	this.StopZoomIfActive = function(){
		if( this.options.controls == "zoom" ){
			if( this.divControls != null ){
				this.divControls.remove();
				this.zoom.boxZoom.remove();
				this.zoom.boxSpringer.remove();
				this.divControls = null;
				delete this.zoom;  /* ( The delete keyword deletes a property from an object. ) */
				return true;
			}
		}
		return false;
	};

	/* bind mouse to the main div */
	this.InitializeMouse = function(){
		$j(document).bind(
			"mousedown touchstart",
			function( e ){

				/* if the click didnt hit neither the canvas nor the springer, ignore click */
				var target = e.target || e.srcElement;
				if( target != this.ui.cnvImageCanvas[0] && !$j(target).hasClass("springer") ){
					return;
				}
				e.preventDefault();

				/* mouse (computer) or touch (tablet & Co)? */
				if( e.type == "mousedown" ){
					this.mousePageX = e.pageX;
					this.mousePageY = e.pageY;
				} else {
					this.mousePageX = e.originalEvent.touches[0].pageX;
					this.mousePageY = e.originalEvent.touches[0].pageY;
				}

				this.mouseIsDown = true;
				this.stop();
			}.bind(this)
		);
		$j(document).bind(
			"mouseup touchend",
			function( e ){
				this.mousePageX = 0;
				this.mousePageY = 0;
				this.mouseIsDown = false;
			}.bind(this)
		);
		$j(document).bind(
			"mousemove touchmove",
			function( e ){
				var x = 0;
				var y = 0;

				if( e.type == "touchmove" ){
					x = (e.originalEvent.touches[0].pageX - this.mousePageX) / 10;
				} else {
					x = (e.pageX - this.mousePageX) / 10;
				}

				if( this.options.controls == "zoom" && this.zoom != null ){
					if( e.type == "touchmove" ){
						this.zoom.MoveZoomImageByMouse(
							e.originalEvent.touches[0].pageX,
							e.originalEvent.touches[0].pageY
						);
						return;
					} else {
						this.zoom.MoveZoomImageByMouse(e.pageX,e.pageY);
					}
				}


				/** Warum ist das hier? Scheint, nur behindernd zu sein...
				 *  Auskommentiert wegen merkwürdigem Verhalten.
				 * if( !this.mouseIsDown ){
				 * 	var image = this.imageList[this.activeImageIndex];
				 * 	if( this.options.controls == "zoom" && this.zoom != null ){
				 * 		/* minimum left-wert
				 * 		var minX = image.offset().left + this.zoom.boxSpringer.width()/2-1;
				 * 		/* maximum left-wert
				 * 		var maxX = image.offset().left + image.width() - this.zoom.boxSpringer.width()/2-1;
				 * 		/* minimum top-wert
				 * 		var minY = image.offset().top + image.height() - this.zoom.boxSpringer.height()/2-1;
				 * 		/* maximum top-wert
				 * 		var maxY = image.offset().top + this.zoom.boxSpringer.height()/2-1;
				 *
				 * 		if( e.type == "touchmove" ){
				 * 			y = (e.originalEvent.touches[0].pageY - this.mousePageY)
				 * 		} else {
				 * 			y = (e.pageY - this.mousePageY)
				 * 		}
				 *
				 * 		x = x*10;
				 * 		var destX = x;
				 * 		var destY = y;
				 *
				 * 		if( x < minX ){
				 * 			destX = minX;
				 * 		} else {
				 * 			if( x > maxX ){
				 * 				destX = maxX;
				 * 			}
				 * 		}
				 * 		if( y > minY ){
				 * 			destY = minY;
				 * 		} else {
				 * 			if( y < maxY ){
				 * 				destY = maxY;
				 * 			}
				 * 		}
				 * 		this.zoom.MoveZoomImageByMouse(destX,destY);
				 * 	}
				 * 	return;
				 * }
				**/



				/* if mousebutton is not pressed, abort */
				if( !this.mouseIsDown ){
					return;
				}
				if( x < 0 ){
					/* next image */
					for( i=x; i<0; i++ ){
						this.nextImage(false);
					}
				} else if( x > 0 ){
					/* previous image */
					for( i=x ; i>0; i-- ){
						this.previousImage(false);
					}
				} else {
					/* x == 0  =--> abort */
					return;
				}

				/* ??? */
				if( e.type == "touchmove" ){
					this.mousePageX = e.originalEvent.touches[0].pageX;
				} else {
					this.mousePageX = e.pageX;
				}
			}.bind(this)
		)
	};



	/* Filelist.txt parser | response upon AJAX call */
	this.HandleResponse = function(data){

		/* split the file contents into array */
		this.options.images = data.replace(/['"]/g,"").split(",");
		$j.each(
			this.options.images,
			function(index, value){
				/* create new hidden img object */
				var image = $j("<img style=\"display: none;\" />");

				/* bind image processing to onload-event, so it will be done, when it is loaded */
				image.one(
					"load",
					function(){
						/* setTimeout for long receive times (the event will be fired after getting the meta data (or smt like that), not after finishing the picture) */
						setTimeout(function(){
							/* do stuff only with the FIRST asynchronously loaded image */
							if( this.imageLoadedCount == 0 ){

								/* full width control panel */
								this.ui.divControlPanelParent.css( "width", "100%" );
								/* show progressbar */
								this.ui.divProgressBar.show();


								var set_canvas_size = function(){
									var firstimage = this.imageList[0];
									/* the show and hide is done, because of IE 10 */
										firstimage.show();
									var firstimage_width = firstimage[0].naturalWidth;  /* bild original maße */
									var firstimage_height = firstimage[0].naturalHeight;  /* bild original maße */
										firstimage.hide();
									/* / */

									/** set canvas elements properties
									 * These properties represent the size of the drawing area in pixel.
									 *   It gets rescaled to the rendered dimensions, so this must have the same
									 *    width and height, as the pictures have.
									**/
									this.ui.cnvImageCanvas[0].width = firstimage_width; /* auf bild original maße setzen */
									this.ui.cnvImageCanvas[0].height = firstimage_height; /* auf bild original maße setzen */

									/** set canvas elements css properties
									 * These css properties represent the size of the canvas element itself.
									 *   The drawing area is scaled up to these proportions.
									 *   These css properties are causing the canvas to keep its aspect ratio,
									 *    while scaling to the offered space.
									**/
									this.ui.cnvImageCanvas.css("width", "auto");
									this.ui.cnvImageCanvas.css("height", "auto");
									this.ui.cnvImageCanvas.css("max-width", "100%");
									this.ui.cnvImageCanvas.css("max-height", "100%");
								}.bind(this);

								/* draw first image */
								this.setImageActive(0);


								/* repeat drawing the first image every half second */
								/* abort after max 5 draws or after finishing loading */
								var current_count = 0;
								var start_img_draw = function(){
									if( 5 > current_count && !this.isLoaded){
										/* console.log("ich bin durchgang "+current_count); */
										current_count += 1;

										set_canvas_size();

										/* draw image to canvas */
										this.ui.cnvImageCanvas[0].getContext("2d").drawImage(
											this.imageList[0][0],
											0,
											0
										);

										/* function calls itself after 0.5 seconds */
										setTimeout(start_img_draw, 500);
									}
								}.bind(this);
								start_img_draw();
							}



							/* set the width of the context element to the parent, if not yet set */
							var contextWidth = this.context.width();
							if( contextWidth == 0 ){
								contextWidth = this.context.parent().width();
							}

							/* tell the class of the new loaded image */
							this.imageLoadedCount++;

							/* update loading status */
							var loading_status = this.imageLoadedCount / this.options.images.length*100;
							$j(this.ui.divProgressBar).progressbar("option","value",loading_status);
							$j(this.ui.divProgressBar).css({width: loading_status+"%"});



							/* do stuff only for the LAST image */
							if( this.imageLoadedCount === this.options.images.length ){

								/* set loaded flag */
								this.isLoaded = true;

								/* remove (loading) progress bar */
								$j(this.ui.divProgressBar).progressbar("destroy").remove();
								this.ui.divProgressBar=null;

								/* if controls are wished, show the control panel  (container) */
								if( this.options.controls !== false && this.options.controls !== "false" ){
									this.ui.divControlPanel.show();
									this.ui.divControlPanelParent.css("width","100%");
								}

								/* init mouse events */
								this.InitializeMouse();

								/* if animation wanted, start it now */
								if(this.options.animate !== "false"){
									this.start();
								}
							}
						}.bind(this).bind(image), 200);
					}.bind(this).bind(image)

				/* image.each(...); */
				).each(
					/* if picture is already in the browser-cache, browsers mostly dont fire the load event. */
					/* the event is mandatory though, so this helps firing the load event again. */
					function(){
						if( this.complete ){
							$j(this).load();
						}
					}.bind(this).bind(image)
				);

				/* append this image to its container */
				this.ui.divImages.append(image);
				this.imageList.push(image);
				image.attr(
					"src",
					value + "?" + new Date().getTime()
				)

			}.bind(this)
		);

		/* maximum control container width */
		this.ui.divControlPanelParent.css("width","100%");
		/* append control container to image container */
		this.ui.divImages.append(this.ui.divControlPanelParent);
			/* append progress bar to control container */
			this.ui.divControlPanelParent.append(this.ui.divProgressBar);
			/* append control panel to control container */
			this.ui.divControlPanelParent.append(this.ui.divControlPanel);
	};


	/* Box Initialising */
	this.Initialize = function(){

		/* set focus */
		if (!isMobile.any) {
			this.ui.divImages.hover(
				function() {
					this.focus();
				}, function() {
					this.blur();
				}
			).keydown(function (e) {
				this.HandleKeyEvent(e);
			}.bind(this))
		}


		/* When controls set to "true", hide zoom button */
		if( this.options.controls=="true" ){
			this.ui.btnControls.hide();
			this.ui.divControlPanel.css("width","123px")
		}

		/* when mobile device which is not ipad, hide zoom */
		if( isMobile.any && !isMobile.iPad ){
			this.ui.btnControls.hide();
		}

		/* start with appending the image box to the box3d */
		this.ui.divImages.css("outline", "0");
		this.context.append(this.ui.divImages);
		/* append canvas to the image box */
		this.ui.divImages.append(this.ui.cnvImageCanvas);
		/* append buttons to control panel */
		this.ui.divControlPanel.append(this.ui.btnPrevious);
		this.ui.divControlPanel.append(this.ui.btnStart);
		this.ui.divControlPanel.append(this.ui.btnNext);
		this.ui.divControlPanel.append(this.ui.btnControls);

		/* hide the buttons till the progress bar is done */
		this.ui.divControlPanel.hide();
		/* append jquery progress bar to progressbar-container */
		this.ui.divProgressBar.progressbar({value:0});

		/* check for animation options */
		this.isRepeated = this.options.animate == "repeat";
		if( this.isRepeated ){
			this.isOnce = true;
		} else {
			this.isOnce = this.options.animate == "once";
		}

		/* AJAX call to get Filelist.txt (containing image paths) */
		var c = this.options.baseURL + this.options.object + "/" + this.options.size + "/Filelist.txt";
		if( this.options.images == null ){
			$j.ajax({
				url: c,
				type: "get",
				dataType: "text",
				error: function( e,f,d ){
					if( e.status == 404 ){
						$j.get(
							this.options.baseURL + this.options.object + "/" + this.options.size + "/FileList.txt",
							this.HandleResponse
						)
					}
				}.bind(this),
				success: this.HandleResponse.bind(this)
			});
		} else {
			this.HandleResponse( this.options.images );
		}

		/* bind click event to prev button */
		this.ui.btnPrevious.button().on(
			"click touchstart",
			function(e){
				this.nextImage(true);
				return false;
			}.bind(this)
		);

		/* bind click event to start button */
		this.ui.btnStart.button().on(
			"click touchstart",
			function(e){
				if( this.shouldSkipToggle && $j.browser.mozilla != undefined ){
					this.shouldSkipToggle=false;
					return;
				}
				this.StopZoomIfActive();
				this.toggle();
				return false;
			}.bind(this)
		);

		/* bind click event to next button */
		this.ui.btnNext.button().on(
			"click touchstart",
			function(e){
				this.previousImage(true);
				return false;
			}.bind(this)
		);

		/* bind click event to zoom button */
		this.ui.btnControls.button().on(
			"click touchstart",
			function(d){

				/* extra box wanted as zoom container */
				if( this.options.controls == "zoom" ){
					/* try to stop the zoom */
					if( !this.StopZoomIfActive() ){
						/* stop animation */
						this.stop();
						this.isRepeated = false;

						/* ?? */
						this.divControls = $j(_uniqueDIV("zoom"));
						$j(window).scroll(
							function(){
								if( this.zoom != null && this.options.controls == "zoom" ){
									this.zoom.UpdatePosition();
								}
							}.bind(this)
						);
						this.context.append( this.divControls );

						/* create new zoombox */
						this.zoom = new $j.fn.Box3DZoom( this, this.divControls, this.options.zoom);

						/* set zoom picture */
						this.isFirstLoad = true;
						this.zoom.SetZoomImage(
							this.imageList[this.activeImageIndex].attr("src").replace("small","large")
						);

						/* update image section */
						var box_elem = this.zoom.box3D.ui.cnvImageCanvas;
						this.zoom.MoveZoomImageByMouse(
							box_elem.offset().left + box_elem.width()/2,
							box_elem.offset().top + box_elem.height()/2
						);
					}
				/* iframe(???) / extra window   wanted as zoom container */
				} else if( this.options.controls == "einzelbild" ){
					this.stop();
					$j.fancybox({
						type: "iframe",
						width: "65%",
						height: "85%",
						overlayColor: "#777777",
						padding: 2,
						href: this.imageList[this.activeImageIndex].attr("src").replace("small","large"),
						transitionIn: "elastic",
						transitionOut: "elastic",
						speedIn: 500,
						speedOut: 300
					})
				/* ??? */
				} else if( this.options.controls == "box" ){
					this.stop();
					this.isRepeated=false;
					var f = this.options.baseURL + "large.html";
					var e = window.btoa( JSON.stringify(this.options) );
					f += "?settings=" + e;
					$j.fancybox({
						type: "iframe",
						width: "100%",
						height: "100%",
						overlayColor: "#777777",
						padding: 2,
						href: f,
						transitionIn: "elastic",
						transitionOut: "elastic",
						speedIn: 500,
						speedOut: 300
					})
				}
				return false;
			}.bind(this)
		);
	}
};
/* document finished loading */
$j(document).ready(function(){

	/* 1.) set base settings */
	var b = {
		object: null,
		size: "small",
		controls: "zoom",
		images: null,
		keyboard: true,
		animate: "endless",
		animate_interval: null,
		framerate: 20,
		direction: "forward",
		baseURL: "",
		zoom: {
			position: "right",
			height: "450px",
			width: "450px",
			position: "right",
			background: "#000",
			border: "2px solid #CCCCCC",
			margin: 9,
			text_colorBG: "#FFFFFF",
			text_colorFont: "#49addf",
			text: "<b><center>Drehen mit Links & Rechts.</center></b>",
			font: "",
			font_size: ""
		}
	};

	/* 2.) parse url params to check for settings (in base64 ecoding) */
	var a = window.location.search.split("?");
	if( a.length>1 ){
		var c = a[1];
		if( c.indexOf("settings=") != -1 ){
			c = c.replace("settings=","");
			b = $j.parseJSON(window.atob(c));
			b.controls = false;
		}
	}

	/* 3.) apply url params on each box3d div */
	$j("div.box3d").each(function(e,i){
		var h = null;
		/* check for base64 encoded params */
		var d = $j(i).attr("data-base64");
		if( d != null ){
			/* decode params, apply and instantiate box3d player */
			var f = decodeURIComponent( escape( window.atob(d) ) );
			var g = $j.parseJSON(f);
			h = new $j.fn.Box3D(
				$j(this),
				g
			);
		} else {
			/* apply unencoded settings and instantiate box3d player */
			applySetting = function(k,j){
				var l = $j(i).attr("data-"+k);
				if( l != null ){
					var m = k;
					if( m.indexOf("zoom-") != -1 ){
						m = m.replace( "zoom-", "" );
					}
					j[m] = l
				}
			};
			applySetting("object",b);
			applySetting("images",b);
			applySetting("size",b);
			applySetting("controls",b);
			applySetting("keyboard",b);
			applySetting("animate",b);
			applySetting("animate_interval",b);
			applySetting("framerate",b);
			applySetting("direction",b);
			applySetting("baseURL",b);
			applySetting("zoom-position",b.zoom);
			applySetting("zoom-height",b.zoom);
			applySetting("zoom-width",b.zoom);
			applySetting("zoom-background",b.zoom);
			applySetting("zoom-border",b.zoom);
			applySetting("zoom-margin",b.zoom);
			applySetting("zoom-text_colorBG",b.zoom);
			applySetting("zoom-text_colorFont",b.zoom);
			applySetting("zoom-text",b.zoom);
			applySetting("zoom-font",b.zoom);
			applySetting("zoom-font_size",b.zoom);
			h = new $j.fn.Box3D( $j(this), b );
		}
		h.Initialize();
	});
});
